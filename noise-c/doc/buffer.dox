/*
 * Copyright (C) 2016 Southern Storm Software, Pty Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
\file buffer.h
\brief Buffer management.
*/

/**
 * \defgroup buffer_management Buffer management API
 *
 * This API defines types and macros to help with managing the passing
 * of buffers to the Noise-C library.  NoiseBuffer objects carry their
 * current and maximum sizes around with them wherever they go.  The intention
 * is that applications that use NoiseBuffer are less likely to create a
 * buffer overrun situation because the maximum size is always available
 * for checking and never implicit.
 */
/**@{*/

/**
 * \struct NoiseBuffer
 * \brief Type that defines a region of memory for a data buffer.
 */

/**
 * \def noise_buffer_init(buffer)
 * \brief Initializes all fields of a buffer to zero.
 */

/**
 * \def noise_buffer_set_output(buffer, ptr, len)
 * \brief Sets a NoiseBuffer object to point to an output memory region.
 *
 * \param buffer The NoiseBuffer object to set.
 * \param ptr Pointer to the start of the memory region for the buffer.
 * \param len Length of the memory region in bytes.
 *
 * The buffer's current size is set to zero and its maximum size is
 * set to \a len.
 *
 * This macro is intended for initializing a region of memory to
 * receive data that was output by a Noise-C function.  The maximum
 * size indicates how many bytes can be output into the region
 * before overflow occurs.
 */

/**
 * \def noise_buffer_set_input(buffer, ptr, len)
 * \brief Sets a NoiseBuffer object to point to an input memory region.
 *
 * \param buffer The NoiseBuffer object to set.
 * \param ptr Pointer to the start of the memory region for the buffer.
 * \param len Length of the memory region in bytes.
 *
 * The buffer's current and maximum size are both set to \a len.
 *
 * This macro is intended for passing an existing region of memory to a
 * Noise-C function.  It is typically used for input values.
 */

/**
 * \def noise_buffer_set_inout(buffer, ptr, len, max)
 * \brief Sets a NoiseBuffer object to point to an input-output memory region.
 *
 * \param buffer The NoiseBuffer object to set.
 * \param ptr Pointer to the start of the memory region for the buffer.
 * \param len Length of the memory region in bytes on input.
 * \param max Maximum length of the memory region in bytes.
 *
 * This function is intended for use when transforming a region of memory;
 * for example to encrypt or decrypt it.  The original size is \a len
 * and during transformation the region can grow in size to no more
 * than \a max.
 */

/**@}*/
