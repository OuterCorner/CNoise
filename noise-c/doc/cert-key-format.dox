/*
 * Copyright (C) 2016 Southern Storm Software, Pty Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/**
\file cert-key-format.dox
\page cert_key_format Certificate and private key format

\tableofcontents

This document describes certificate and private key formats that
are proposed for use in implementations of Noise.

The certificate format is represented on the wire using
<a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>
or "protobufs" for short.  The full protocol description is contained
in the \ref noise_certificate_proto "noise-certificate.proto" file
in the Noise-C distribution.

\section cert_examples Certificate format examples

The following is an example of a certificate for "Jane Smith" that has been
signed by "Trent Peoples".  To make things easier, we will use a simplified
text syntax for describing the contents of a protobuf message.  The data is
actually encoded in binary on the wire using the standard
<a href="https://developers.google.com/protocol-buffers/docs/encoding">Protocol
Buffers Encoding</a>.

\code
Certificate {
    version: 1
    subject: SubjectInfo {
        id: "jane.smith@example.com"
        name: "Jane Smith"
        role: "foo-chat-user"
        keys: [
            PublicKeyInfo {
                algorithm: "25519"
                key: "0xf14a2dedf6e1dd879a3af47900eedf17ae56868a7849a370ca732a571ef19e0f"
            }
            PublicKeyInfo {
                algorithm: "448"
                key: "0xd414a46bed6231540306818bdab08d8b06a28d98d0bfca47bcea1faf1aca78d8aabc7d7c2073779bd84cf0950ae10247975266267eebb1c8"
            }
        ]
    }
    signatures: [
        Signature {
            id: "tpeoples@example.org"
            name: "Trent Peoples"
            signing_key: PublicKeyInfo {
                algorithm: "Ed25519"
                key: "0x0fdde4a7a7cc91ec509a74bd5f2369ac768a14bb6388ceb2e1710a4b85bfe001"
            }
            hash_algorithm: "BLAKE2b"
            extra_signed_info: ExtraSignedInfo {
                nonce: "0xa2bf177b31bd60ee0e8e00097d88e48e"
                valid_from: "2016-03-15T00:00:00Z"
                valid_to: "2026-03-15T23:59:59Z"
            }
            signature: "0x40fa37936793009750ca45e9ef1eb246eaaded93ddd356e7120e0dc171cfa51ff26b7d7a95ba9498d717bff6b9e5d5eeb0a4bbdbf7bcd8c5c4b617da36a68ed9"
        }
    ]
}
\endcode

Here, Jane has declared that her Curve25519 and Curve448 Diffie-Hellman keys
will be used in the "foo-chat-user" role.  Trent then accepted that role,
hashed the certificate data with "BLAKE2b", and added his signature using the
"Ed25519" algorithm.

The signature covers the contents of the "subject" and "extra_signed_info"
fields, represented in the standard
<a href="https://developers.google.com/protocol-buffers/docs/encoding">Protocol
Buffers Encoding</a>.  The encoding MUST be "canonical" in that all integer
values, field tag numbers, and field lengths are represented using the
minimum number of bytes for the value, and the fields are listed strictly
in order of field tag number.

Multiple signature blocks can be included from multiple signers:

\code
signatures: [
    Signature {
        id: "tpeoples@example.org"
        name: "Trent Peoples"
        signing_key: PublicKeyInfo {
            algorithm: "Ed25519"
            key: "0x0fdde4a7a7cc91ec509a74bd5f2369ac768a14bb6388ceb2e1710a4b85bfe001"
        }
        hash_algorithm: "BLAKE2b"
        extra_signed_info: ExtraSignedInfo {
            nonce: "0xa2bf177b31bd60ee0e8e00097d88e48e"
            valid_from: "2016-03-15T00:00:00Z"
            valid_to: "2026-03-15T23:59:59Z"
        }
        signature: "0x40fa37936793009750ca45e9ef1eb246eaaded93ddd356e7120e0dc171cfa51ff26b7d7a95ba9498d717bff6b9e5d5eeb0a4bbdbf7bcd8c5c4b617da36a68ed9"
    }
    Signature {
        id: "mary.sue@example.com"
        name: "Mary Sue"
        signing_key: PublicKeyInfo {
            algorithm: "Ed25519"
            key: "0x8e15998d97f9b43150f05d1b895f5272a2ff1453dbf40ee4ea90df81147db5c3"
        }
        hash_algorithm: "SHA512"
        extra_signed_info: ExtraSignedInfo {
            nonce: "0x024e95d2a060df2be5e1fbdfe8e31c58"
            valid_from: "2015-05-17T00:00:00Z"
            valid_to: "2025-05-17T23:59:59Z"
        }
        signature: "0x833243ed18ac609880446c1ea147f6322db98ef9d2eaba30ece46bf7cabe50cd822fbe369f4c9c6bd8a5a5f400fff732f1a29c4113e12cb23138733ca880126d"
    }
]
\endcode

Each signature is independent, covering the "subject" information and
continuing with the "extra_signed_info" details for the specific signer.
In the above example, Mary's signature does not include the details
from Trent.  The certificate would be equally valid with Mary's signature
listed first.

Because the signatures are independent, new signatures can be added to
the end of the certificate at any time.  Or old signatures can be removed
from the certificate at any time.  Any remaining signatures will remain
valid as they only vouch for Jane's identity, not the identity of
the other signers.

This approach also allows certificates to be trimmed when they are sent
in Noise packets.  If the client is communicating with a server that
trusts Trent as a certificate authority, then there is no need to send
the signature block for Mary.  Certificates may also be trimmed to
hide the identity of additional signers from remote parties that do not
need to know about those signers.

\note Signatures provide additional information that may help bind a key
to an identity for specific use cases, but signatures are not necessary
for secure communication to occur.  Protocols should keep this in mind
when using Noise certificates.  The lack of a signature does not imply
that the user is untrustworthy.  It only implies that the user has not
found anyone yet who they trust to sign their certificate.  Other
strategies such as "Trust On First Use" can be used to manage certificates
that lack signatures.

\section cert_format Certificate format details

The format details below are specified in the
<a href="https://developers.google.com/protocol-buffers/docs/proto3">proto3</a>
language.

\subsection cert_overall_format Top level of certificates and certificate chains

The top level of a certificate contains a version number, information about
the subject, and any optional signatures:

\dontinclude noise-certificate.proto
\skip message Certificate
\until }

The version number MUST be 1 for this version of the format.

In all of the definitions here, field tags 1 to 15 are intended for use
by this format description (or future versions of it).  Field tags 16
and higher are available for private use extensions, although this shouldn't
be necessary because the "meta" field described later provides a standard
way to add extensions.

Certificate chains are a list of one or more certificates:

\dontinclude noise-certificate.proto
\skip message CertificateChain
\until }

The field tag number on the certificates in a chain is deliberately set to 8,
which is different than any of the field tags in "Certificate".  This allows
applications to quickly determine if the supplied data is a single certificate
or a certificate chain.

When a chain of certificates is given, the first is assumed to be the subject
with the remainder of the certificates intended to provide additional
information to verify the subject.

\subsection cert_subject Subject information

\dontinclude noise-certificate.proto
\skip message SubjectInfo
\until }

<tt>id</tt> - The identity of the subject, formatted as "foo@domain"
and encoded in UTF-8.  The <tt>Id</tt> may look like an e-mail address
but it doesn't have to be.  It only needs to be unique in the context
of the larger Noise protocol.

<tt>name</tt> - The name of the subject for the certificate.  This string
is intended to be human-readable and MUST be encoded in UTF-8.  If the
<tt>name</tt> is not present, <tt>id</tt> can be displayed to the human user
instead.

Both <tt>id</tt> and <tt>name</tt> are OPTIONAL.  If neither are present,
then the subject is identified by their public key fingerprint.  This option
is provided to protect the identity of anonymous users.  A pseudonym could
be used instead, but pseudonym use is not required.

<tt>role</tt> - The role that the subject's keys are intended to be used for.
There are no predefined roles yet and the field can be omitted.  The role
may be an application name; e.g. "foo-chat", or a sub-role within an
application; e.g. "foo-chat-user" and "foo-chat-server".

<tt>keys</tt> - List of public keys for the subject.

\dontinclude noise-certificate.proto
\skip message PublicKeyInfo
\until }

<tt>meta</tt> - Extra meta information about the subject as a list of
freeform name/value pairs:

\dontinclude noise-certificate.proto
\skip message MetaInfo
\until }

MetaInfo blocks may be used to add extra information that is of interest
to an application.  For example, "Foo-Nickname" may convey the nickname
of a user for the "foo-chat" application.  For privacy reasons, any meta
information that may identify the user MUST be OPTIONAL.  Applications
SHOULD use meta names that are obviously unique to that application to
avoid conflict with other applications.

\subsection cert_signature Signature blocks

\dontinclude noise-certificate.proto
\skip message Signature
\until }

The <tt>id</tt> and <tt>name</tt> fields have the same format and meaning
as for subject information blocks.  In this case they identify the signer.
Both fields can be omitted to hide the identity of the signer.

The <tt>signing_key</tt> field specifies the algorithm name and public key
that was used to sign the certificate.

The <tt>hash_algorithm</tt> indicates the algorithm that was used to
hash the subject information and <tt>extra_signed_info</tt>.  It should be
one of <tt>BLAKE2s</tt>, <tt>BLAKE2b</tt>, <tt>SHA256</tt>, or
<tt>SHA512</tt>.  <tt>BLAKE2b</tt> or <tt>SHA512</tt> is recommended
to ensure signature longevity.

The <tt>extra_signed_info</tt> field contains information that is signed
along with the subject information:

\dontinclude noise-certificate.proto
\skip message ExtraSignedInfo
\until }

The <tt>nonce</tt> is an extra pseudorandom value added by the signer,
which ensures that multiple signatures for the same subject from
the same signer will be different.  The value should be considered
opaque.  It is recommended that it consist of at least 128 bits
of pseudorandom data.  This field SHOULD be included.  It MAY be omitted
for anonymous users to avoid the watermarking problems described under
\ref cert_other "Other issues" below.  The <tt>valid_from</tt> field SHOULD
be included in this case to provide a fallback nonce that is different
between signatures.

The <tt>valid_from</tt> and <tt>valid_to</tt> OPTIONAL fields indicate
the starting and ending times for the validity of the signature.
Note: This is the validity of the signature, not of the certificate.
The signer is not saying "this key is valid for this period" but
rather "I do not vouch for this certificate outside this time period".
The subject information may remain valid for much longer.  The format MUST
comply with <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a>
as profiled in <a href="https://tools.ietf.org/html/rfc3339">RFC 3339</a>.

The <tt>signature</tt> field MUST be the last line in the <tt>Signature</tt>
block, and contains the actual signature produced with the <tt>signing_key</tt>
and <tt>hash_algorithm</tt>.

If there were any existing <tt>Signature</tt> blocks in the
certificate to be signed, they are ignored when calculating the hash.
The new signature block is inserted at the end of the certificate.

\subsection cert_other Other issues

Any strings that are read from a certificate and presented to a human
user should be preprocessed to remove or transform control characters or
other data that may be problematic for the output device.  The security
considerations from <a href="https://tools.ietf.org/html/rfc3629">RFC 3629</a>
should be kept in mind to ensure that all strings are strict UTF-8.

The <tt>nonce</tt> value and implementation-specific meta fields could be
used to watermark users who otherwise wish to remain anonymous.  Once a
certificate is signed, the subject will need to import the signature into
their key ring.  At this point the subject can see if any extra fields
were inserted that concern them and reject the signature.

The <tt>nonce</tt> field is opaque and non-obvious but highly recommended
to deal with duplicate signatures for the same subject key.  The <tt>nonce</tt>
field MAY be omitted by a signer from certificates if they wish to provide
some assurance to anonymous users that they have not watermarked the
signature.  The <tt>valid_from</tt> field is used as a fallback nonce
for this case.

Anonymous users can choose to reject signatures that include a
<tt>nonce</tt>.  They should also carefully inspect the <tt>valid_from</tt>
and <tt>valid_to</tt> timestamps.  Odd date or time values might provide
another opportunity to include watermarking bits.

The main protection against this is disclosure.  If it was discovered
that well-known signing authorities were watermarking certificates,
affected users can remove the offending signatures and seek new signers.

Signers may require some kind of proof that the subject is in possession
of the relevant key before adding a signature.  For Diffie-Hellman keys,
the Noise protocol itself provides handshake patterns that can prove key
possession.

A hypothetical certificate issuing protocol should check that the static
public key for the session matches that in the supplied certificate.
This does become more complex if the subject has multiple encryption keys
or signing keys.  Multiple requests may be necessary to prove ownership
of the additional keys.

\section key_format Encrypted private key format

The private key information is similar to the subject information from the
certificate format:

\dontinclude noise-certificate.proto
\skip message PrivateKey
\until }
\skip message PrivateKeyInfo
\until }

The format of "PrivateKey" and "PrivateKeyInfo" are identical to
"SubjectInfo" and "PublicKeyInfo", which may allow applications to
share the format handling code between the two use cases if they so wish.

The private key information is encrypted to protect it inside an
"EncryptedPrivateKey" wrapper:

\dontinclude noise-certificate.proto
\skip message EncryptedPrivateKey
\until }

For example:

\code
EncryptedPrivateKey {
    version: 1
    algorithm: "ChaChaPoly_BLAKE2b_PBKDF2"
    salt: "0x1621bb322ca96658eb6172d01031845f"
    iterations: 50000
    encrypted_data: "0x..."
}
\endcode

The <tt>version</tt> must be 1 for this version of the encrypted
private key format.

The <tt>algorithm</tt> indicates the cipher, hash, and KDF schemes that
are used to protect the private key.  Any Noise cipher or hash algorithm
supported by the application can be used, although "ChaChaPoly_BLAKE2b_PBKDF2"
is recommended for minimum interoperability.

The only KDF algorithm that is defined at present is PBKDF2 from
<a href="https://www.ietf.org/rfc/rfc2898.txt">RFC 2898</a>.  The
<tt>salt</tt> and <tt>iterations</tt> fields are two of the parameters
to PBKDF2 (the other being the passphrase).

Other KDF algorithms may be defined in the future.  The <tt>salt</tt>
and <tt>iterations</tt> fields can be repurposed to contain whatever
parameters those KDF algorithms require.

As an example, the algorithm identifier "ChaChaPoly_BLAKE2b_PBKDF2" is
implemented as follows.  PBKDF2 is used with BLAKE2b to generate an
encryption key and nonce for ChaChaPoly.  The first 32 bytes of the PBKDF2
output are used as the encryption key.  The next 8 bytes of the PBKDF2 output
are interpreted as a big-endian 64-bit value and used as the nonce.
The entirety of the private key details are encrypted in a single request,
which limits the size to 65535 bytes including the MAC.

\note The nonce value 2^64 - 1 (0xFFFFFFFFFFFFFFFF) is reserved by
revision 30 of the Noise specification.  If the PBKDF2 hashing process
generates such a nonce, then the implementation should generate a new
salt and hash the passphrase again.  This situation is highly unlikely.

The <tt>salt</tt> SHOULD be at least 16 bytes in length, and MAY be longer
at the implementation's discretion.  The unsigned 32-bit <tt>iteration</tt>
count should be large enough to make dictionary attacks on the private key
file time-consuming on current hardware.

Encrypted private keys can be a hassle for servers and other systems
that run unattended.  Such systems may need to use a static passphrase,
even if only the empty passphrase.

The field tag numbers on "EncryptedPrivateKey" are deliberately different
than those for "Certificate" and "CertificateChain" so that an application
can easily determine what type of data it is processing.  Applications may
use this to cross-check that a private key is not accidentally sent
over the wire as a certificate.

\section fingerprints Public key fingerprints

When displaying a public key to a human user, the public key SHOULD
be hashed with SHA256 with the first 16 bytes of the value formatted
in hexadecimal, separated by colons.  For example:

\code
34:da:01:7b:07:e1:a0:0d:64:14:be:e9:af:cf:db:7b
\endcode

Fingerprints MAY be calculated with other hash algorithms or MAY
include more than 16 bytes.  However, SHA256 with truncation is
RECOMMENDED to improve interoperability of fingerprints between
implementations.

*/
